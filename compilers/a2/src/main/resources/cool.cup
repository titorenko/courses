/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal method method;
nonterminal attr attr;
nonterminal Expression expr;
nonterminal Expressions expr_list_block;
nonterminal Expressions expr_list_call;
nonterminal Formals formal_list;
nonterminal formalc formal; 
nonterminal Cases case_list;
nonterminal Case  case;
nonterminal Expression let_body_expr;

/* Precedence declarations go here. */
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence nonassoc EQ, LT, LE;
precedence nonassoc ISVOID;
precedence nonassoc NEG;
precedence nonassoc AT;
precedence nonassoc DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error SEMI
	;

/* Feature list may be empty, but no empty features in list. */
feature_list
	/* single feature*/
	::= feature:f
	    {: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	/* several features */
	| feature_list:fl feature:f
	    {: RESULT = fl.appendElement(f); :}	    
	/* empty */
	|	
	    {: RESULT = new Features(curr_lineno()); :}
	;
	
feature
	::= method:m
		{: RESULT = m; :}
	|   attr:a
		{: RESULT = a; :}
	| error SEMI		
	;
		
method	    
	::= OBJECTID:id LPAREN formal_list:fl RPAREN COLON TYPEID:rtype LBRACE expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), id, fl, rtype, e); :}
	;
	
attr
	::= OBJECTID:id COLON TYPEID:type ASSIGN expr:e SEMI
		{: RESULT = new attr(curr_lineno(), id, type, e); :}
	| OBJECTID:id COLON TYPEID:type SEMI
		{: RESULT = new attr(curr_lineno(), id, type, new no_expr(curr_lineno())); :}
	;
	
formal_list
	::= formal:f
	    {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	| formal_list:fl COMMA formal:f
	    {: RESULT = fl.appendElement(f); :}	    
	|	
	    {: RESULT = new Formals(curr_lineno()); :}
	;	
	
formal	
	::= OBJECTID:id COLON TYPEID:type
		{: RESULT = new formalc(curr_lineno(), id, type); :}
	;
	
expr_list_block
	::= expr:e SEMI
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| expr_list_block:el expr:e SEMI
		{: RESULT = el.appendElement(e); :}
	
	| error SEMI
		{: RESULT = new Expressions(curr_lineno()); :}
	;
	
expr_list_call
	::= expr:e
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| expr_list_call:el COMMA expr:e
		{: RESULT = el.appendElement(e); :}	    
	|	
	    {: RESULT = new Expressions(curr_lineno()); :}
	;
	
case_list
	::= case:c
		{: RESULT = (new Cases(curr_lineno())).appendElement(c); :}
	| case_list:cl case:c
		{: RESULT = cl.appendElement(c); :}
	;

case
	::=OBJECTID:id COLON TYPEID:type DARROW expr:b SEMI
		{: RESULT = new branch(curr_lineno(), id, type, b); :}
	; 		
	
	
let_body_expr
	::= IN expr:e
		{: RESULT = e; :}
	| COMMA OBJECTID:id COLON TYPEID:type ASSIGN expr:ass let_body_expr:body
		{: RESULT = new let(curr_lineno(), id, type, ass, body); :}
	| COMMA OBJECTID:id COLON TYPEID:type let_body_expr:body
		{: RESULT = new let(curr_lineno(), id, type, new no_expr(curr_lineno()), body); :}
	| COMMA OBJECTID:id COLON TYPEID:type ASSIGN error let_body_expr:body
		{: RESULT = new let(curr_lineno(), id, type, new no_expr(curr_lineno()), body); :}
	;
	
expr
	::= OBJECTID:id ASSIGN expr:e
		{: RESULT = new assign(curr_lineno(), id, e); :}
	| expr:e AT TYPEID:t DOT OBJECTID:id LPAREN expr_list_call:el RPAREN
		{: RESULT = new static_dispatch(curr_lineno(), e, t, id, el); :}		
	| expr:e DOT OBJECTID:id LPAREN expr_list_call:el RPAREN
		{: RESULT = new dispatch(curr_lineno(), e, id, el); :}		
	| OBJECTID:id LPAREN expr_list_call:el RPAREN
		{: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), id, el); :}
	| IF expr:ie THEN expr:te ELSE expr:ee FI
		 {: RESULT = new cond(curr_lineno(), ie, te, ee); :}
	| WHILE expr:p LOOP expr:b POOL
		 {: RESULT = new loop(curr_lineno(), p, b); :}		 
	| LBRACE expr_list_block:el RBRACE 
		{: RESULT = new block(curr_lineno(), el); :}
		
	| LET OBJECTID:id COLON TYPEID:type ASSIGN expr:ass let_body_expr:body
		{: RESULT = new let(curr_lineno(), id, type, ass, body); :}		
	| LET OBJECTID:id COLON TYPEID:type let_body_expr:body
		{: RESULT = new let(curr_lineno(), id, type, new no_expr(curr_lineno()), body); :}
	| LET OBJECTID:id COLON TYPEID:type error let_body_expr:body
		{: RESULT = new let(curr_lineno(), id, type, new no_expr(curr_lineno()), body); :}

	| CASE expr:p OF case_list:l ESAC
		{: RESULT = new typcase(curr_lineno(), p, l); :} 
	| NEW TYPEID:t
		{: RESULT = new new_(curr_lineno(), t); :}
	| ISVOID expr:e
		{: RESULT = new isvoid(curr_lineno(), e); :}

	| expr:le PLUS expr:re
		{: RESULT = new plus(curr_lineno(), le, re); :}
	| expr:le MINUS expr:re
		{: RESULT = new sub(curr_lineno(), le, re); :}					
	| expr:le MULT expr:re
		{: RESULT = new mul(curr_lineno(), le, re); :}		
	| expr:le DIV expr:re
		{: RESULT = new divide(curr_lineno(), le, re); :}
				
	| NEG expr:e 
		{: RESULT = new neg(curr_lineno(), e); :}		
	| expr:le LT expr:re
		{: RESULT = new lt(curr_lineno(), le, re); :}		
	| expr:le LE expr:re
		{: RESULT = new leq(curr_lineno(), le, re); :}		
	| expr:le EQ expr:re
		{: RESULT = new eq(curr_lineno(), le, re); :}
		%prec EQ				
	| NOT expr:e
		{: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
		{: RESULT = e; :}		
	| OBJECTID:id
		{: RESULT = new object(curr_lineno(), id); :}
	| STR_CONST:s
		{: RESULT = new string_const(curr_lineno(), s); :}		
	| INT_CONST:i
		{: RESULT = new int_const(curr_lineno(), i); :}
	| BOOL_CONST:b
		{: RESULT = new bool_const(curr_lineno(), b); :}
	; 	 	
	 
	